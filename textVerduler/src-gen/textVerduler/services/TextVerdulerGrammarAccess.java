/*
 * generated by Xtext
 */
package textVerduler.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TextVerdulerGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class VerduleriaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Verduleria");
		private final Assignment cAnotacionesAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cAnotacionesAlternatives_0 = (Alternatives)cAnotacionesAssignment.eContents().get(0);
		private final RuleCall cAnotacionesModelClienteParserRuleCall_0_0 = (RuleCall)cAnotacionesAlternatives_0.eContents().get(0);
		private final RuleCall cAnotacionesModelProductoParserRuleCall_0_1 = (RuleCall)cAnotacionesAlternatives_0.eContents().get(1);
		private final RuleCall cAnotacionesModelVentaParserRuleCall_0_2 = (RuleCall)cAnotacionesAlternatives_0.eContents().get(2);
		
		//Verduleria:
		//	anotaciones+=(ModelCliente | ModelProducto | ModelVenta)*;
		@Override public ParserRule getRule() { return rule; }

		//anotaciones+=(ModelCliente | ModelProducto | ModelVenta)*
		public Assignment getAnotacionesAssignment() { return cAnotacionesAssignment; }

		//ModelCliente | ModelProducto | ModelVenta
		public Alternatives getAnotacionesAlternatives_0() { return cAnotacionesAlternatives_0; }

		//ModelCliente
		public RuleCall getAnotacionesModelClienteParserRuleCall_0_0() { return cAnotacionesModelClienteParserRuleCall_0_0; }

		//ModelProducto
		public RuleCall getAnotacionesModelProductoParserRuleCall_0_1() { return cAnotacionesModelProductoParserRuleCall_0_1; }

		//ModelVenta
		public RuleCall getAnotacionesModelVentaParserRuleCall_0_2() { return cAnotacionesModelVentaParserRuleCall_0_2; }
	}

	public class ModelClienteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelCliente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cClientesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cClientesClienteParserRuleCall_0_0 = (RuleCall)cClientesAssignment_0.eContents().get(0);
		private final Keyword cCommaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEstadoDeDeudaAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEstadoDeDeudaEstadoDeudaParserRuleCall_2_0 = (RuleCall)cEstadoDeDeudaAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ModelCliente:
		//	clientes+=Cliente "," estadoDeDeuda=EstadoDeuda ".";
		@Override public ParserRule getRule() { return rule; }

		//clientes+=Cliente "," estadoDeDeuda=EstadoDeuda "."
		public Group getGroup() { return cGroup; }

		//clientes+=Cliente
		public Assignment getClientesAssignment_0() { return cClientesAssignment_0; }

		//Cliente
		public RuleCall getClientesClienteParserRuleCall_0_0() { return cClientesClienteParserRuleCall_0_0; }

		//","
		public Keyword getCommaKeyword_1() { return cCommaKeyword_1; }

		//estadoDeDeuda=EstadoDeuda
		public Assignment getEstadoDeDeudaAssignment_2() { return cEstadoDeDeudaAssignment_2; }

		//EstadoDeuda
		public RuleCall getEstadoDeDeudaEstadoDeudaParserRuleCall_2_0() { return cEstadoDeDeudaEstadoDeudaParserRuleCall_2_0; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class ModelProductoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelProducto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProductosAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cProductosProductoParserRuleCall_0_0 = (RuleCall)cProductosAssignment_0.eContents().get(0);
		private final Assignment cValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValorValorDelProductoParserRuleCall_1_0 = (RuleCall)cValorAssignment_1.eContents().get(0);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ModelProducto:
		//	productos+=Producto valor=ValorDelProducto ".";
		@Override public ParserRule getRule() { return rule; }

		//productos+=Producto valor=ValorDelProducto "."
		public Group getGroup() { return cGroup; }

		//productos+=Producto
		public Assignment getProductosAssignment_0() { return cProductosAssignment_0; }

		//Producto
		public RuleCall getProductosProductoParserRuleCall_0_0() { return cProductosProductoParserRuleCall_0_0; }

		//valor=ValorDelProducto
		public Assignment getValorAssignment_1() { return cValorAssignment_1; }

		//ValorDelProducto
		public RuleCall getValorValorDelProductoParserRuleCall_1_0() { return cValorValorDelProductoParserRuleCall_1_0; }

		//"."
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
	}

	public class ModelVentaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelVenta");
		private final Assignment cVentaAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cVentaVentaParserRuleCall_0 = (RuleCall)cVentaAssignment.eContents().get(0);
		
		//ModelVenta:
		//	venta+=Venta;
		@Override public ParserRule getRule() { return rule; }

		//venta+=Venta
		public Assignment getVentaAssignment() { return cVentaAssignment; }

		//Venta
		public RuleCall getVentaVentaParserRuleCall_0() { return cVentaVentaParserRuleCall_0; }
	}

	public class VentaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Venta");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreIDTerminalRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cComproKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cUnaListaDeComprasAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUnaListaDeComprasMercaderiaParserRuleCall_2_0_0 = (RuleCall)cUnaListaDeComprasAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cSeRedondeaAKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cUnImporteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnImporteImporteParserRuleCall_4_0 = (RuleCall)cUnImporteAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUnTotalAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUnTotalTotalDeCompraParserRuleCall_6_0 = (RuleCall)cUnTotalAssignment_6.eContents().get(0);
		private final Keyword cFullStopKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Venta:
		//	nombre=ID "compro" (unaListaDeCompras=Mercaderia ","?)* "se redondea a"? unImporte=Importe "," unTotal=TotalDeCompra
		//	".";
		@Override public ParserRule getRule() { return rule; }

		//nombre=ID "compro" (unaListaDeCompras=Mercaderia ","?)* "se redondea a"? unImporte=Importe "," unTotal=TotalDeCompra "."
		public Group getGroup() { return cGroup; }

		//nombre=ID
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }

		//ID
		public RuleCall getNombreIDTerminalRuleCall_0_0() { return cNombreIDTerminalRuleCall_0_0; }

		//"compro"
		public Keyword getComproKeyword_1() { return cComproKeyword_1; }

		//(unaListaDeCompras=Mercaderia ","?)*
		public Group getGroup_2() { return cGroup_2; }

		//unaListaDeCompras=Mercaderia
		public Assignment getUnaListaDeComprasAssignment_2_0() { return cUnaListaDeComprasAssignment_2_0; }

		//Mercaderia
		public RuleCall getUnaListaDeComprasMercaderiaParserRuleCall_2_0_0() { return cUnaListaDeComprasMercaderiaParserRuleCall_2_0_0; }

		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//"se redondea a"?
		public Keyword getSeRedondeaAKeyword_3() { return cSeRedondeaAKeyword_3; }

		//unImporte=Importe
		public Assignment getUnImporteAssignment_4() { return cUnImporteAssignment_4; }

		//Importe
		public RuleCall getUnImporteImporteParserRuleCall_4_0() { return cUnImporteImporteParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//unTotal=TotalDeCompra
		public Assignment getUnTotalAssignment_6() { return cUnTotalAssignment_6; }

		//TotalDeCompra
		public RuleCall getUnTotalTotalDeCompraParserRuleCall_6_0() { return cUnTotalTotalDeCompraParserRuleCall_6_0; }

		//"."
		public Keyword getFullStopKeyword_7() { return cFullStopKeyword_7; }
	}

	public class TotalDeCompraElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TotalDeCompra");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnTotalAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cUnTotalAlternatives_0_0 = (Alternatives)cUnTotalAssignment_0.eContents().get(0);
		private final Keyword cUnTotalPagaKeyword_0_0_0 = (Keyword)cUnTotalAlternatives_0_0.eContents().get(0);
		private final Keyword cUnTotalQuedaDebiendoKeyword_0_0_1 = (Keyword)cUnTotalAlternatives_0_0.eContents().get(1);
		private final Assignment cUnImporteTotalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnImporteTotalImporteParserRuleCall_1_0 = (RuleCall)cUnImporteTotalAssignment_1.eContents().get(0);
		
		//TotalDeCompra:
		//	unTotal=("paga" | "queda debiendo") unImporteTotal=Importe?;
		@Override public ParserRule getRule() { return rule; }

		//unTotal=("paga" | "queda debiendo") unImporteTotal=Importe?
		public Group getGroup() { return cGroup; }

		//unTotal=("paga" | "queda debiendo")
		public Assignment getUnTotalAssignment_0() { return cUnTotalAssignment_0; }

		//"paga" | "queda debiendo"
		public Alternatives getUnTotalAlternatives_0_0() { return cUnTotalAlternatives_0_0; }

		//"paga"
		public Keyword getUnTotalPagaKeyword_0_0_0() { return cUnTotalPagaKeyword_0_0_0; }

		//"queda debiendo"
		public Keyword getUnTotalQuedaDebiendoKeyword_0_0_1() { return cUnTotalQuedaDebiendoKeyword_0_0_1; }

		//unImporteTotal=Importe?
		public Assignment getUnImporteTotalAssignment_1() { return cUnImporteTotalAssignment_1; }

		//Importe
		public RuleCall getUnImporteTotalImporteParserRuleCall_1_0() { return cUnImporteTotalImporteParserRuleCall_1_0; }
	}

	public class MercaderiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mercaderia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaDescripcionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaDescripcionCantidadParserRuleCall_0_0 = (RuleCall)cUnaDescripcionAssignment_0.eContents().get(0);
		private final Keyword cDeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNombreDeProductoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNombreDeProductoIDTerminalRuleCall_2_0 = (RuleCall)cNombreDeProductoAssignment_2.eContents().get(0);
		
		//Mercaderia:
		//	unaDescripcion=Cantidad "de" nombreDeProducto=ID;
		@Override public ParserRule getRule() { return rule; }

		//unaDescripcion=Cantidad "de" nombreDeProducto=ID
		public Group getGroup() { return cGroup; }

		//unaDescripcion=Cantidad
		public Assignment getUnaDescripcionAssignment_0() { return cUnaDescripcionAssignment_0; }

		//Cantidad
		public RuleCall getUnaDescripcionCantidadParserRuleCall_0_0() { return cUnaDescripcionCantidadParserRuleCall_0_0; }

		//"de"
		public Keyword getDeKeyword_1() { return cDeKeyword_1; }

		//nombreDeProducto=ID
		public Assignment getNombreDeProductoAssignment_2() { return cNombreDeProductoAssignment_2; }

		//ID
		public RuleCall getNombreDeProductoIDTerminalRuleCall_2_0() { return cNombreDeProductoIDTerminalRuleCall_2_0; }
	}

	public class ProductoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Producto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cLasKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLosKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cNombreDeProductoAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNombreDeProductoIDTerminalRuleCall_1_0 = (RuleCall)cNombreDeProductoAssignment_1.eContents().get(0);
		
		//Producto:
		//	("Las" | "Los") nombreDeProducto=ID;
		@Override public ParserRule getRule() { return rule; }

		//("Las" | "Los") nombreDeProducto=ID
		public Group getGroup() { return cGroup; }

		//"Las" | "Los"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"Las"
		public Keyword getLasKeyword_0_0() { return cLasKeyword_0_0; }

		//"Los"
		public Keyword getLosKeyword_0_1() { return cLosKeyword_0_1; }

		//nombreDeProducto=ID
		public Assignment getNombreDeProductoAssignment_1() { return cNombreDeProductoAssignment_1; }

		//ID
		public RuleCall getNombreDeProductoIDTerminalRuleCall_1_0() { return cNombreDeProductoIDTerminalRuleCall_1_0; }
	}

	public class ValorDelProductoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValorDelProducto");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSalenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUnaDescripcionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnaDescripcionDescripcionParserRuleCall_1_0 = (RuleCall)cUnaDescripcionAssignment_1.eContents().get(0);
		
		//ValorDelProducto:
		//	"salen" unaDescripcion=Descripcion;
		@Override public ParserRule getRule() { return rule; }

		//"salen" unaDescripcion=Descripcion
		public Group getGroup() { return cGroup; }

		//"salen"
		public Keyword getSalenKeyword_0() { return cSalenKeyword_0; }

		//unaDescripcion=Descripcion
		public Assignment getUnaDescripcionAssignment_1() { return cUnaDescripcionAssignment_1; }

		//Descripcion
		public RuleCall getUnaDescripcionDescripcionParserRuleCall_1_0() { return cUnaDescripcionDescripcionParserRuleCall_1_0; }
	}

	public class DescripcionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Descripcion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnImporteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnImporteImporteParserRuleCall_0_0 = (RuleCall)cUnImporteAssignment_0.eContents().get(0);
		private final Assignment cUnaCantidadAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnaCantidadCantidadParserRuleCall_1_0 = (RuleCall)cUnaCantidadAssignment_1.eContents().get(0);
		
		//Descripcion:
		//	unImporte=Importe unaCantidad=Cantidad;
		@Override public ParserRule getRule() { return rule; }

		//unImporte=Importe unaCantidad=Cantidad
		public Group getGroup() { return cGroup; }

		//unImporte=Importe
		public Assignment getUnImporteAssignment_0() { return cUnImporteAssignment_0; }

		//Importe
		public RuleCall getUnImporteImporteParserRuleCall_0_0() { return cUnImporteImporteParserRuleCall_0_0; }

		//unaCantidad=Cantidad
		public Assignment getUnaCantidadAssignment_1() { return cUnaCantidadAssignment_1; }

		//Cantidad
		public RuleCall getUnaCantidadCantidadParserRuleCall_1_0() { return cUnaCantidadCantidadParserRuleCall_1_0; }
	}

	public class CantidadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cantidad");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnArticuloAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnArticuloArticuloParserRuleCall_0_0 = (RuleCall)cUnArticuloAssignment_0.eContents().get(0);
		private final Assignment cUnValorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUnValorINTTerminalRuleCall_1_0 = (RuleCall)cUnValorAssignment_1.eContents().get(0);
		private final Assignment cUnaCantidadAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUnaCantidadUnidadParserRuleCall_2_0 = (RuleCall)cUnaCantidadAssignment_2.eContents().get(0);
		
		//Cantidad:
		//	unArticulo=Articulo? unValor=INT? unaCantidad=Unidad;
		@Override public ParserRule getRule() { return rule; }

		//unArticulo=Articulo? unValor=INT? unaCantidad=Unidad
		public Group getGroup() { return cGroup; }

		//unArticulo=Articulo?
		public Assignment getUnArticuloAssignment_0() { return cUnArticuloAssignment_0; }

		//Articulo
		public RuleCall getUnArticuloArticuloParserRuleCall_0_0() { return cUnArticuloArticuloParserRuleCall_0_0; }

		//unValor=INT?
		public Assignment getUnValorAssignment_1() { return cUnValorAssignment_1; }

		//INT
		public RuleCall getUnValorINTTerminalRuleCall_1_0() { return cUnValorINTTerminalRuleCall_1_0; }

		//unaCantidad=Unidad
		public Assignment getUnaCantidadAssignment_2() { return cUnaCantidadAssignment_2; }

		//Unidad
		public RuleCall getUnaCantidadUnidadParserRuleCall_2_0() { return cUnaCantidadUnidadParserRuleCall_2_0; }
	}

	public class ArticuloElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Articulo");
		private final Assignment cUnArticuloAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cUnArticuloAlternatives_0 = (Alternatives)cUnArticuloAssignment.eContents().get(0);
		private final Keyword cUnArticuloElKeyword_0_0 = (Keyword)cUnArticuloAlternatives_0.eContents().get(0);
		private final Keyword cUnArticuloLosKeyword_0_1 = (Keyword)cUnArticuloAlternatives_0.eContents().get(1);
		
		//Articulo:
		//	unArticulo=("el" | "los");
		@Override public ParserRule getRule() { return rule; }

		//unArticulo=("el" | "los")
		public Assignment getUnArticuloAssignment() { return cUnArticuloAssignment; }

		//"el" | "los"
		public Alternatives getUnArticuloAlternatives_0() { return cUnArticuloAlternatives_0; }

		//"el"
		public Keyword getUnArticuloElKeyword_0_0() { return cUnArticuloElKeyword_0_0; }

		//"los"
		public Keyword getUnArticuloLosKeyword_0_1() { return cUnArticuloLosKeyword_0_1; }
	}

	public class UnidadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Unidad");
		private final Assignment cUnaUnidadAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cUnaUnidadAlternatives_0 = (Alternatives)cUnaUnidadAssignment.eContents().get(0);
		private final Keyword cUnaUnidadKiloKeyword_0_0 = (Keyword)cUnaUnidadAlternatives_0.eContents().get(0);
		private final Keyword cUnaUnidadKilosKeyword_0_1 = (Keyword)cUnaUnidadAlternatives_0.eContents().get(1);
		private final Keyword cUnaUnidadMedioKiloKeyword_0_2 = (Keyword)cUnaUnidadAlternatives_0.eContents().get(2);
		private final Keyword cUnaUnidadCuartoKiloKeyword_0_3 = (Keyword)cUnaUnidadAlternatives_0.eContents().get(3);
		private final Keyword cUnaUnidadGramosKeyword_0_4 = (Keyword)cUnaUnidadAlternatives_0.eContents().get(4);
		
		//Unidad:
		//	unaUnidad=("kilo" | "kilos" | "medio kilo" | "cuarto kilo" | "gramos");
		@Override public ParserRule getRule() { return rule; }

		//unaUnidad=("kilo" | "kilos" | "medio kilo" | "cuarto kilo" | "gramos")
		public Assignment getUnaUnidadAssignment() { return cUnaUnidadAssignment; }

		//"kilo" | "kilos" | "medio kilo" | "cuarto kilo" | "gramos"
		public Alternatives getUnaUnidadAlternatives_0() { return cUnaUnidadAlternatives_0; }

		//"kilo"
		public Keyword getUnaUnidadKiloKeyword_0_0() { return cUnaUnidadKiloKeyword_0_0; }

		//"kilos"
		public Keyword getUnaUnidadKilosKeyword_0_1() { return cUnaUnidadKilosKeyword_0_1; }

		//"medio kilo"
		public Keyword getUnaUnidadMedioKiloKeyword_0_2() { return cUnaUnidadMedioKiloKeyword_0_2; }

		//"cuarto kilo"
		public Keyword getUnaUnidadCuartoKiloKeyword_0_3() { return cUnaUnidadCuartoKiloKeyword_0_3; }

		//"gramos"
		public Keyword getUnaUnidadGramosKeyword_0_4() { return cUnaUnidadGramosKeyword_0_4; }
	}

	public class ClienteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Cliente");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClienteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Cliente:
		//	"Cliente" name=ID;
		@Override public ParserRule getRule() { return rule; }

		//"Cliente" name=ID
		public Group getGroup() { return cGroup; }

		//"Cliente"
		public Keyword getClienteKeyword_0() { return cClienteKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class EstadoDeudaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EstadoDeuda");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cDebeKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAlDiaKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Keyword cTieneCreditoKeyword_0_2 = (Keyword)cAlternatives_0.eContents().get(2);
		private final RuleCall cImporteParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EstadoDeuda:
		//	("debe" | "al dia" | "tiene credito") Importe?;
		@Override public ParserRule getRule() { return rule; }

		//("debe" | "al dia" | "tiene credito") Importe?
		public Group getGroup() { return cGroup; }

		//"debe" | "al dia" | "tiene credito"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"debe"
		public Keyword getDebeKeyword_0_0() { return cDebeKeyword_0_0; }

		//"al dia"
		public Keyword getAlDiaKeyword_0_1() { return cAlDiaKeyword_0_1; }

		//"tiene credito"
		public Keyword getTieneCreditoKeyword_0_2() { return cTieneCreditoKeyword_0_2; }

		//Importe?
		public RuleCall getImporteParserRuleCall_1() { return cImporteParserRuleCall_1; }
	}

	public class ImporteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Importe");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValorINTTerminalRuleCall_0_0 = (RuleCall)cValorAssignment_0.eContents().get(0);
		private final Assignment cMonedaAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMonedaMonedaParserRuleCall_1_0 = (RuleCall)cMonedaAssignment_1.eContents().get(0);
		
		//Importe:
		//	valor=INT moneda=Moneda;
		@Override public ParserRule getRule() { return rule; }

		//valor=INT moneda=Moneda
		public Group getGroup() { return cGroup; }

		//valor=INT
		public Assignment getValorAssignment_0() { return cValorAssignment_0; }

		//INT
		public RuleCall getValorINTTerminalRuleCall_0_0() { return cValorINTTerminalRuleCall_0_0; }

		//moneda=Moneda
		public Assignment getMonedaAssignment_1() { return cMonedaAssignment_1; }

		//Moneda
		public RuleCall getMonedaMonedaParserRuleCall_1_0() { return cMonedaMonedaParserRuleCall_1_0; }
	}

	public class MonedaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Moneda");
		private final Assignment cPesosAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPesosPesosKeyword_0 = (Keyword)cPesosAssignment.eContents().get(0);
		
		//Moneda:
		//	pesos="pesos";
		@Override public ParserRule getRule() { return rule; }

		//pesos="pesos"
		public Assignment getPesosAssignment() { return cPesosAssignment; }

		//"pesos"
		public Keyword getPesosPesosKeyword_0() { return cPesosPesosKeyword_0; }
	}
	
	
	private final VerduleriaElements pVerduleria;
	private final ModelClienteElements pModelCliente;
	private final ModelProductoElements pModelProducto;
	private final ModelVentaElements pModelVenta;
	private final VentaElements pVenta;
	private final TotalDeCompraElements pTotalDeCompra;
	private final MercaderiaElements pMercaderia;
	private final ProductoElements pProducto;
	private final ValorDelProductoElements pValorDelProducto;
	private final DescripcionElements pDescripcion;
	private final CantidadElements pCantidad;
	private final ArticuloElements pArticulo;
	private final UnidadElements pUnidad;
	private final ClienteElements pCliente;
	private final EstadoDeudaElements pEstadoDeuda;
	private final ImporteElements pImporte;
	private final MonedaElements pMoneda;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TextVerdulerGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pVerduleria = new VerduleriaElements();
		this.pModelCliente = new ModelClienteElements();
		this.pModelProducto = new ModelProductoElements();
		this.pModelVenta = new ModelVentaElements();
		this.pVenta = new VentaElements();
		this.pTotalDeCompra = new TotalDeCompraElements();
		this.pMercaderia = new MercaderiaElements();
		this.pProducto = new ProductoElements();
		this.pValorDelProducto = new ValorDelProductoElements();
		this.pDescripcion = new DescripcionElements();
		this.pCantidad = new CantidadElements();
		this.pArticulo = new ArticuloElements();
		this.pUnidad = new UnidadElements();
		this.pCliente = new ClienteElements();
		this.pEstadoDeuda = new EstadoDeudaElements();
		this.pImporte = new ImporteElements();
		this.pMoneda = new MonedaElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("textVerduler.TextVerduler".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Verduleria:
	//	anotaciones+=(ModelCliente | ModelProducto | ModelVenta)*;
	public VerduleriaElements getVerduleriaAccess() {
		return pVerduleria;
	}
	
	public ParserRule getVerduleriaRule() {
		return getVerduleriaAccess().getRule();
	}

	//ModelCliente:
	//	clientes+=Cliente "," estadoDeDeuda=EstadoDeuda ".";
	public ModelClienteElements getModelClienteAccess() {
		return pModelCliente;
	}
	
	public ParserRule getModelClienteRule() {
		return getModelClienteAccess().getRule();
	}

	//ModelProducto:
	//	productos+=Producto valor=ValorDelProducto ".";
	public ModelProductoElements getModelProductoAccess() {
		return pModelProducto;
	}
	
	public ParserRule getModelProductoRule() {
		return getModelProductoAccess().getRule();
	}

	//ModelVenta:
	//	venta+=Venta;
	public ModelVentaElements getModelVentaAccess() {
		return pModelVenta;
	}
	
	public ParserRule getModelVentaRule() {
		return getModelVentaAccess().getRule();
	}

	//Venta:
	//	nombre=ID "compro" (unaListaDeCompras=Mercaderia ","?)* "se redondea a"? unImporte=Importe "," unTotal=TotalDeCompra
	//	".";
	public VentaElements getVentaAccess() {
		return pVenta;
	}
	
	public ParserRule getVentaRule() {
		return getVentaAccess().getRule();
	}

	//TotalDeCompra:
	//	unTotal=("paga" | "queda debiendo") unImporteTotal=Importe?;
	public TotalDeCompraElements getTotalDeCompraAccess() {
		return pTotalDeCompra;
	}
	
	public ParserRule getTotalDeCompraRule() {
		return getTotalDeCompraAccess().getRule();
	}

	//Mercaderia:
	//	unaDescripcion=Cantidad "de" nombreDeProducto=ID;
	public MercaderiaElements getMercaderiaAccess() {
		return pMercaderia;
	}
	
	public ParserRule getMercaderiaRule() {
		return getMercaderiaAccess().getRule();
	}

	//Producto:
	//	("Las" | "Los") nombreDeProducto=ID;
	public ProductoElements getProductoAccess() {
		return pProducto;
	}
	
	public ParserRule getProductoRule() {
		return getProductoAccess().getRule();
	}

	//ValorDelProducto:
	//	"salen" unaDescripcion=Descripcion;
	public ValorDelProductoElements getValorDelProductoAccess() {
		return pValorDelProducto;
	}
	
	public ParserRule getValorDelProductoRule() {
		return getValorDelProductoAccess().getRule();
	}

	//Descripcion:
	//	unImporte=Importe unaCantidad=Cantidad;
	public DescripcionElements getDescripcionAccess() {
		return pDescripcion;
	}
	
	public ParserRule getDescripcionRule() {
		return getDescripcionAccess().getRule();
	}

	//Cantidad:
	//	unArticulo=Articulo? unValor=INT? unaCantidad=Unidad;
	public CantidadElements getCantidadAccess() {
		return pCantidad;
	}
	
	public ParserRule getCantidadRule() {
		return getCantidadAccess().getRule();
	}

	//Articulo:
	//	unArticulo=("el" | "los");
	public ArticuloElements getArticuloAccess() {
		return pArticulo;
	}
	
	public ParserRule getArticuloRule() {
		return getArticuloAccess().getRule();
	}

	//Unidad:
	//	unaUnidad=("kilo" | "kilos" | "medio kilo" | "cuarto kilo" | "gramos");
	public UnidadElements getUnidadAccess() {
		return pUnidad;
	}
	
	public ParserRule getUnidadRule() {
		return getUnidadAccess().getRule();
	}

	//Cliente:
	//	"Cliente" name=ID;
	public ClienteElements getClienteAccess() {
		return pCliente;
	}
	
	public ParserRule getClienteRule() {
		return getClienteAccess().getRule();
	}

	//EstadoDeuda:
	//	("debe" | "al dia" | "tiene credito") Importe?;
	public EstadoDeudaElements getEstadoDeudaAccess() {
		return pEstadoDeuda;
	}
	
	public ParserRule getEstadoDeudaRule() {
		return getEstadoDeudaAccess().getRule();
	}

	//Importe:
	//	valor=INT moneda=Moneda;
	public ImporteElements getImporteAccess() {
		return pImporte;
	}
	
	public ParserRule getImporteRule() {
		return getImporteAccess().getRule();
	}

	//Moneda:
	//	pesos="pesos";
	public MonedaElements getMonedaAccess() {
		return pMoneda;
	}
	
	public ParserRule getMonedaRule() {
		return getMonedaAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
