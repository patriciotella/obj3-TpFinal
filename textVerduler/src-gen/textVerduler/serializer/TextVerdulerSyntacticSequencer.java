/*
 * generated by Xtext
 */
package textVerduler.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import textVerduler.services.TextVerdulerGrammarAccess;

@SuppressWarnings("all")
public class TextVerdulerSyntacticSequencer extends AbstractSyntacticSequencer {

	protected TextVerdulerGrammarAccess grammarAccess;
	protected AbstractElementAlias match_EstadoDeuda_AlDiaKeyword_0_1_or_DebeKeyword_0_0_or_TieneCreditoKeyword_0_2;
	protected AbstractElementAlias match_Producto_LasKeyword_0_0_or_LosKeyword_0_1;
	protected AbstractElementAlias match_Venta_CommaKeyword_2_1_q;
	protected AbstractElementAlias match_Venta_SeRedondeaAKeyword_3_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (TextVerdulerGrammarAccess) access;
		match_EstadoDeuda_AlDiaKeyword_0_1_or_DebeKeyword_0_0_or_TieneCreditoKeyword_0_2 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getEstadoDeudaAccess().getAlDiaKeyword_0_1()), new TokenAlias(false, false, grammarAccess.getEstadoDeudaAccess().getDebeKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getEstadoDeudaAccess().getTieneCreditoKeyword_0_2()));
		match_Producto_LasKeyword_0_0_or_LosKeyword_0_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getProductoAccess().getLasKeyword_0_0()), new TokenAlias(false, false, grammarAccess.getProductoAccess().getLosKeyword_0_1()));
		match_Venta_CommaKeyword_2_1_q = new TokenAlias(false, true, grammarAccess.getVentaAccess().getCommaKeyword_2_1());
		match_Venta_SeRedondeaAKeyword_3_q = new TokenAlias(false, true, grammarAccess.getVentaAccess().getSeRedondeaAKeyword_3());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if(match_EstadoDeuda_AlDiaKeyword_0_1_or_DebeKeyword_0_0_or_TieneCreditoKeyword_0_2.equals(syntax))
				emit_EstadoDeuda_AlDiaKeyword_0_1_or_DebeKeyword_0_0_or_TieneCreditoKeyword_0_2(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Producto_LasKeyword_0_0_or_LosKeyword_0_1.equals(syntax))
				emit_Producto_LasKeyword_0_0_or_LosKeyword_0_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Venta_CommaKeyword_2_1_q.equals(syntax))
				emit_Venta_CommaKeyword_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if(match_Venta_SeRedondeaAKeyword_3_q.equals(syntax))
				emit_Venta_SeRedondeaAKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     'debe' | 'al dia' | 'tiene credito'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 *     (rule start) (ambiguity) valor=INT
	 */
	protected void emit_EstadoDeuda_AlDiaKeyword_0_1_or_DebeKeyword_0_0_or_TieneCreditoKeyword_0_2(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'Las' | 'Los'
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) nombreDeProducto=ID
	 */
	protected void emit_Producto_LasKeyword_0_0_or_LosKeyword_0_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     unaListaDeCompras=Mercaderia (ambiguity) 'se redondea a'? unImporte=Importe
	 *     unaListaDeCompras=Mercaderia (ambiguity) unaListaDeCompras=Mercaderia
	 */
	protected void emit_Venta_CommaKeyword_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     'se redondea a'?
	 *
	 * This ambiguous syntax occurs at:
	 *     nombre=ID 'compro' (ambiguity) unImporte=Importe
	 *     unaListaDeCompras=Mercaderia ','? (ambiguity) unImporte=Importe
	 */
	protected void emit_Venta_SeRedondeaAKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
