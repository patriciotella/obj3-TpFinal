/*
 * generated by Xtext
 */
package textVerduler.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import textVerduler.services.TextVerdulerGrammarAccess;
import textVerduler.textVerduler.Articulo;
import textVerduler.textVerduler.Cantidad;
import textVerduler.textVerduler.Cliente;
import textVerduler.textVerduler.Descripcion;
import textVerduler.textVerduler.Importe;
import textVerduler.textVerduler.Mercaderia;
import textVerduler.textVerduler.ModelCliente;
import textVerduler.textVerduler.ModelProducto;
import textVerduler.textVerduler.ModelVenta;
import textVerduler.textVerduler.Moneda;
import textVerduler.textVerduler.Producto;
import textVerduler.textVerduler.TextVerdulerPackage;
import textVerduler.textVerduler.TotalDeCompra;
import textVerduler.textVerduler.Unidad;
import textVerduler.textVerduler.ValorDelProducto;
import textVerduler.textVerduler.Venta;
import textVerduler.textVerduler.Verduleria;

@SuppressWarnings("all")
public class TextVerdulerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TextVerdulerGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == TextVerdulerPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case TextVerdulerPackage.ARTICULO:
				sequence_Articulo(context, (Articulo) semanticObject); 
				return; 
			case TextVerdulerPackage.CANTIDAD:
				sequence_Cantidad(context, (Cantidad) semanticObject); 
				return; 
			case TextVerdulerPackage.CLIENTE:
				sequence_Cliente(context, (Cliente) semanticObject); 
				return; 
			case TextVerdulerPackage.DESCRIPCION:
				sequence_Descripcion(context, (Descripcion) semanticObject); 
				return; 
			case TextVerdulerPackage.IMPORTE:
				sequence_Importe(context, (Importe) semanticObject); 
				return; 
			case TextVerdulerPackage.MERCADERIA:
				sequence_Mercaderia(context, (Mercaderia) semanticObject); 
				return; 
			case TextVerdulerPackage.MODEL_CLIENTE:
				sequence_ModelCliente(context, (ModelCliente) semanticObject); 
				return; 
			case TextVerdulerPackage.MODEL_PRODUCTO:
				sequence_ModelProducto(context, (ModelProducto) semanticObject); 
				return; 
			case TextVerdulerPackage.MODEL_VENTA:
				sequence_ModelVenta(context, (ModelVenta) semanticObject); 
				return; 
			case TextVerdulerPackage.MONEDA:
				sequence_Moneda(context, (Moneda) semanticObject); 
				return; 
			case TextVerdulerPackage.PRODUCTO:
				sequence_Producto(context, (Producto) semanticObject); 
				return; 
			case TextVerdulerPackage.TOTAL_DE_COMPRA:
				sequence_TotalDeCompra(context, (TotalDeCompra) semanticObject); 
				return; 
			case TextVerdulerPackage.UNIDAD:
				sequence_Unidad(context, (Unidad) semanticObject); 
				return; 
			case TextVerdulerPackage.VALOR_DEL_PRODUCTO:
				sequence_ValorDelProducto(context, (ValorDelProducto) semanticObject); 
				return; 
			case TextVerdulerPackage.VENTA:
				sequence_Venta(context, (Venta) semanticObject); 
				return; 
			case TextVerdulerPackage.VERDULERIA:
				sequence_Verduleria(context, (Verduleria) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (unArticulo='el' | unArticulo='los')
	 */
	protected void sequence_Articulo(EObject context, Articulo semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (unArticulo=Articulo? unValor=INT? unaCantidad=Unidad)
	 */
	protected void sequence_Cantidad(EObject context, Cantidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Cliente(EObject context, Cliente semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.CLIENTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.CLIENTE__NAME));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getClienteAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (unImporte=Importe unaCantidad=Cantidad)
	 */
	protected void sequence_Descripcion(EObject context, Descripcion semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.DESCRIPCION__UN_IMPORTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.DESCRIPCION__UN_IMPORTE));
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.DESCRIPCION__UNA_CANTIDAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.DESCRIPCION__UNA_CANTIDAD));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDescripcionAccess().getUnImporteImporteParserRuleCall_0_0(), semanticObject.getUnImporte());
		feeder.accept(grammarAccess.getDescripcionAccess().getUnaCantidadCantidadParserRuleCall_1_0(), semanticObject.getUnaCantidad());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (valor=INT moneda=Moneda)
	 */
	protected void sequence_Importe(EObject context, Importe semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.IMPORTE__VALOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.IMPORTE__VALOR));
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.IMPORTE__MONEDA) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.IMPORTE__MONEDA));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImporteAccess().getValorINTTerminalRuleCall_0_0(), semanticObject.getValor());
		feeder.accept(grammarAccess.getImporteAccess().getMonedaMonedaParserRuleCall_1_0(), semanticObject.getMoneda());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (unaDescripcion=Cantidad nombreDeProducto=ID)
	 */
	protected void sequence_Mercaderia(EObject context, Mercaderia semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.MERCADERIA__UNA_DESCRIPCION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.MERCADERIA__UNA_DESCRIPCION));
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.MERCADERIA__NOMBRE_DE_PRODUCTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.MERCADERIA__NOMBRE_DE_PRODUCTO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMercaderiaAccess().getUnaDescripcionCantidadParserRuleCall_0_0(), semanticObject.getUnaDescripcion());
		feeder.accept(grammarAccess.getMercaderiaAccess().getNombreDeProductoIDTerminalRuleCall_2_0(), semanticObject.getNombreDeProducto());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (clientes+=Cliente estadoDeDeuda=EstadoDeuda)
	 */
	protected void sequence_ModelCliente(EObject context, ModelCliente semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (productos+=Producto valor=ValorDelProducto)
	 */
	protected void sequence_ModelProducto(EObject context, ModelProducto semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     venta+=Venta
	 */
	protected void sequence_ModelVenta(EObject context, ModelVenta semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     pesos='pesos'
	 */
	protected void sequence_Moneda(EObject context, Moneda semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.MONEDA__PESOS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.MONEDA__PESOS));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getMonedaAccess().getPesosPesosKeyword_0(), semanticObject.getPesos());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     nombreDeProducto=ID
	 */
	protected void sequence_Producto(EObject context, Producto semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.PRODUCTO__NOMBRE_DE_PRODUCTO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.PRODUCTO__NOMBRE_DE_PRODUCTO));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getProductoAccess().getNombreDeProductoIDTerminalRuleCall_1_0(), semanticObject.getNombreDeProducto());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     ((unTotal='paga' | unTotal='queda debiendo') unImporteTotal=Importe?)
	 */
	protected void sequence_TotalDeCompra(EObject context, TotalDeCompra semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (unaUnidad='kilo' | unaUnidad='kilos' | unaUnidad='medio kilo' | unaUnidad='cuarto kilo' | unaUnidad='gramos')
	 */
	protected void sequence_Unidad(EObject context, Unidad semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     unaDescripcion=Descripcion
	 */
	protected void sequence_ValorDelProducto(EObject context, ValorDelProducto semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, TextVerdulerPackage.Literals.VALOR_DEL_PRODUCTO__UNA_DESCRIPCION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TextVerdulerPackage.Literals.VALOR_DEL_PRODUCTO__UNA_DESCRIPCION));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getValorDelProductoAccess().getUnaDescripcionDescripcionParserRuleCall_1_0(), semanticObject.getUnaDescripcion());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (nombre=ID unaListaDeCompras=Mercaderia* unImporte=Importe unTotal=TotalDeCompra)
	 */
	protected void sequence_Venta(EObject context, Venta semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (anotaciones+=ModelCliente | anotaciones+=ModelProducto | anotaciones+=ModelVenta)*
	 */
	protected void sequence_Verduleria(EObject context, Verduleria semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}
